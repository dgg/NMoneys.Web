<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Testing.Commons</name>
    </assembly>
    <members>
        <member name="T:Testing.Commons.Async.PseudoTask">
            <summary>
            Creates stubbed values for apis that return asynchronous results in the shape of <see cref="T:System.Threading.Tasks.Task`1"/>.
            </summary>
        </member>
        <member name="M:Testing.Commons.Async.PseudoTask.Create``1(``0)">
            <summary>
            Builds an asynchronous result with little overhead.
            </summary>
            <typeparam name="T">The type of the result produced by the returned <see cref="T:System.Threading.Tasks.Task`1"/>. </typeparam>
            <param name="result">The result value to bind to the returned task.</param>
            <returns>A <see cref="F:System.Threading.Tasks.TaskStatus.RanToCompletion"/> transitioned task.</returns>
        </member>
        <member name="T:Testing.Commons.Configuration.ConfigurationAssemblyAttribute">
            <summary>
            Allows specifying the path to the fake configuration assembly
            </summary>
            <remarks>The fake configuration assembly is an empty .dll file that serves as a loading point for a external configuration file to test.</remarks>
        </member>
        <member name="M:Testing.Commons.Configuration.ConfigurationAssemblyAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Testing.Commons.Configuration.ConfigurationAssemblyAttribute"/> class. 
            </summary>
            <param name="path">Relative path to the fake configuration assembly.</param>
        </member>
        <member name="P:Testing.Commons.Configuration.ConfigurationAssemblyAttribute.Path">
            <summary>
            Relative path to the fake configuration assembly.
            </summary>
        </member>
        <member name="P:Testing.Commons.Configuration.ConfigurationAssemblyAttribute.FullPath">
            <summary>
            Full path to the fake configuration assembly.
            </summary>
        </member>
        <member name="P:Testing.Commons.Configuration.ConfigurationAssemblyAttribute.Exists">
            <summary>
            true when the fake configuration assembly exists in the filesystem, false otherwise.
            </summary>
        </member>
        <member name="P:Testing.Commons.Configuration.ConfigurationAssemblyAttribute.PointsToAnAssembly">
            <summary>
            true if the path points to an assembly (.dll) file, false otherwise
            </summary>
        </member>
        <member name="P:Testing.Commons.Configuration.ConfigurationAssemblyAttribute.AssemblyName">
            <summary>
            Returns the file name and extension of the path string specified by <see cref="P:Testing.Commons.Configuration.ConfigurationAssemblyAttribute.Path"/>.
            </summary>
        </member>
        <member name="P:Testing.Commons.Configuration.ConfigurationAssemblyAttribute.AssemblyPath">
            <summary>
            Returns the directory information for the path string specified by <see cref="P:Testing.Commons.Configuration.ConfigurationAssemblyAttribute.Path"/>.
            </summary>
        </member>
        <member name="T:Testing.Commons.Configuration.ExceptionMessagePart">
            <summary>
            Allows easy extensibility for testing messages of <see cref="T:System.Configuration.ConfigurationErrorsException"/>.
            </summary>
        </member>
        <member name="P:Testing.Commons.Configuration.ExceptionMessagePart.For">
            <summary>
            Allows meaningful extensions for messages of <see cref="T:System.Configuration.ConfigurationErrorsException"/>.
            </summary>
            <example><code>Assert.That(new[]{1, 2, 3}, Must.Contain.ASingleEvenNumber())</code>
            where <c>.ASingleEvenNumber()</c> returns a custom assertion.</example>
        </member>
        <member name="T:Testing.Commons.Configuration.ExceptionMessagePart.ForEntryPoint">
            <summary>
            Allows meaningful extensions for messages of <see cref="T:System.Configuration.ConfigurationErrorsException"/>.
            </summary>
        </member>
        <member name="T:Testing.Commons.Configuration.ExternalConfiguration">
            <summary>
            Enables getting the path to a fake configuration assembly configured in the test.
            </summary>
        </member>
        <member name="M:Testing.Commons.Configuration.ExternalConfiguration.GetConfigurationAssemblyPath(System.Reflection.MethodBase)">
            <summary>
            Allows acess to the information set in the <see cref="T:Testing.Commons.Configuration.ConfigurationAssemblyAttribute"/> in the test being run,
            enabling testing external configuration files.
            </summary>
            <param name="test">Represents the test being run.</param>
            <returns>The full path to the fake configuration assembly.</returns>
        </member>
        <member name="T:Testing.Commons.Configuration.Messages.MessageExtensions">
            <summary>
            Provides access to some fragments of common messages of <see cref="T:System.Configuration.ConfigurationErrorsException"/> in English.
            </summary>
        </member>
        <member name="M:Testing.Commons.Configuration.Messages.MessageExtensions.WrongMemberValue(Testing.Commons.Configuration.ExceptionMessagePart.ForEntryPoint,System.String)">
            <summary>
            The value does not correspond to the defined type.
            </summary>
            <param name="entry">Extension entry point.</param>
            <param name="memberName">Name of the </param>
            <returns>A formatted substring of the extencion message.</returns>
        </member>
        <member name="M:Testing.Commons.Configuration.Messages.MessageExtensions.UndefinedAttribute(Testing.Commons.Configuration.ExceptionMessagePart.ForEntryPoint,System.String)">
            <summary>
            The element is not defined.
            </summary>
            <param name="entry">Extension entry point.</param>
            <param name="attributeName"></param>
            <returns>A formatted substring of the extencion message.</returns>
        </member>
        <member name="M:Testing.Commons.Configuration.Messages.MessageExtensions.UndefinedElement(Testing.Commons.Configuration.ExceptionMessagePart.ForEntryPoint,System.String)">
            <summary>
            An element could not be recognized.
            </summary>
            <param name="entry">Extension entry point.</param>
            <param name="elementName"></param>
            <returns>A formatted substring of the extencion message.</returns>
        </member>
        <member name="M:Testing.Commons.Configuration.Messages.MessageExtensions.DuplicatedElement(Testing.Commons.Configuration.ExceptionMessagePart.ForEntryPoint,System.String)">
            <summary>
            More than one ocurrence of an element is detected.
            </summary>
            <param name="entry">Extension entry point.</param>
            <param name="elementName"></param>
            <returns>A formatted substring of the extencion message.</returns>
        </member>
        <member name="M:Testing.Commons.Configuration.Messages.MessageExtensions.InvalidAttributeValue(Testing.Commons.Configuration.ExceptionMessagePart.ForEntryPoint,System.String)">
            <summary>
            The value of an attribute does not correspond with its definition.
            </summary>
            <param name="entry">Extension entry point.</param>
            <param name="memberName"></param>
            <returns>A formatted substring of the extencion message.</returns>
        </member>
        <member name="M:Testing.Commons.Configuration.Messages.MessageExtensions.MissingRequiredMember(Testing.Commons.Configuration.ExceptionMessagePart.ForEntryPoint,System.String)">
            <summary>
            A mandatory member is not present.
            </summary>
            <param name="entry">Extension entry point.</param>
            <param name="memberName"></param>
            <returns>A formatted substring of the extencion message.</returns>
        </member>
        <member name="M:Testing.Commons.Configuration.Messages.MessageExtensions.MissingRequiredChildElement``1(Testing.Commons.Configuration.ExceptionMessagePart.ForEntryPoint)">
            <summary>
            A required child of a collection is not present.
            </summary>
            <param name="entry">Extension entry point.</param>
            <returns>A formatted substring of the extencion message.</returns>
        </member>
        <member name="T:Testing.Commons.EnumerableExtensions">
            <summary>
            Allows extensions of IEnumerable that are useful for testing
            </summary>
        </member>
        <member name="M:Testing.Commons.EnumerableExtensions.Iterate``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Iterates a given enumerable.
            </summary>
            <remarks>When testing, the lazy nature of enumerables might give false positives. This provides an easy way to evaluate the enumerable.</remarks>
            <typeparam name="T">The type of objects to enumerate</typeparam>
            <param name="enumerable">Enumerable to be iterated.</param>
        </member>
        <member name="T:Testing.Commons.Globalization.CultureReseter">
            <summary>
            Allows setting and restoring both <see cref="P:System.Threading.Thread.CurrentCulture"/> and <see cref="P:System.Threading.Thread.CurrentUICulture"/>.
            </summary>
        </member>
        <member name="M:Testing.Commons.Globalization.CultureReseter.#ctor">
            <summary>
            Creates an instance of the reseter.
            </summary>
            <remarks>"Freezes" the current information in order to be restored upon disposal.</remarks>
        </member>
        <member name="M:Testing.Commons.Globalization.CultureReseter.Set(System.Globalization.CultureInfo,System.Globalization.CultureInfo)">
            <summary>
            Sets <see cref="P:System.Threading.Thread.CurrentCulture"/> and <see cref="P:System.Threading.Thread.CurrentUICulture"/> to the provided cultures.
            </summary>
            <param name="threadCulture">Culture for the current thread.</param>
            <param name="threadUICulture">Culture used by the <see cref="T:System.Resources.ResourceManager"/></param>
            <returns>An instance of <see cref="T:Testing.Commons.Globalization.CultureReseter"/> with the cultures set and able to restore the previous cultures.</returns>
        </member>
        <member name="M:Testing.Commons.Globalization.CultureReseter.Set(System.String,System.String)">
            <summary>
            Sets <see cref="P:System.Threading.Thread.CurrentCulture"/> and <see cref="P:System.Threading.Thread.CurrentUICulture"/> to the provided cultures.
            </summary>
            <remarks>Instances of <see cref="T:System.Globalization.CultureInfo"/> will be created using <see cref="M:System.Globalization.CultureInfo.GetCultureInfo(System.String)"/>.</remarks>
            <param name="cultureName">Culture name for the current thread.</param>
            <param name="uiCultureName">Culture name used by the <see cref="T:System.Resources.ResourceManager"/></param>
            <returns>An instance of <see cref="T:Testing.Commons.Globalization.CultureReseter"/> with the cultures set and able to restore the previous cultures.</returns>
        </member>
        <member name="M:Testing.Commons.Globalization.CultureReseter.Set(System.Globalization.CultureInfo)">
            <summary>
            Sets <see cref="P:System.Threading.Thread.CurrentCulture"/> and <see cref="P:System.Threading.Thread.CurrentUICulture"/> to the provided culture.
            </summary>
            <param name="bothCultures">Culture for the current thread and used by the <see cref="T:System.Resources.ResourceManager"/></param>
            <returns>An instance of <see cref="T:Testing.Commons.Globalization.CultureReseter"/> with the cultures set and able to restore the previous cultures.</returns>
        </member>
        <member name="M:Testing.Commons.Globalization.CultureReseter.Set(System.String)">
            <summary>
            Sets <see cref="P:System.Threading.Thread.CurrentCulture"/> and <see cref="P:System.Threading.Thread.CurrentUICulture"/> to the provided culture.
            </summary>
            <remarks>Instances of <see cref="T:System.Globalization.CultureInfo"/> will be created using <see cref="M:System.Globalization.CultureInfo.GetCultureInfo(System.String)"/>.</remarks>
            <param name="bothCultureName">Culture name for the current thread and used by the <see cref="T:System.Resources.ResourceManager"/></param>
            <returns>An instance of <see cref="T:Testing.Commons.Globalization.CultureReseter"/> with the cultures set and able to restore the previous cultures.</returns>
        </member>
        <member name="M:Testing.Commons.Globalization.CultureReseter.Dispose">
            <summary>
            Restores <see cref="P:System.Threading.Thread.CurrentCulture"/> and <see cref="P:System.Threading.Thread.CurrentUICulture"/> to the previous values.
            </summary>
        </member>
        <member name="T:Testing.Commons.GuidBuilder">
            <summary>
            Allows creation of deterministic <see cref="T:System.Guid"/> instances.
            </summary>
        </member>
        <member name="M:Testing.Commons.GuidBuilder.Build(System.Char)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Guid"/> structure using the values represented by the specified representation of an hex figure.
            </summary>
            <param name="hexFigure">A hexadecimal figure: '0' to '1' or 'A' to 'F' or 'a' to 'f'.</param>
            <returns>A new instance with the information provided.</returns>
            <exception cref="T:Testing.Commons.GuidBuilder.NotHexadecimalException"><paramref name="hexFigure"/> is not a hexadecimal figure.</exception>
        </member>
        <member name="M:Testing.Commons.GuidBuilder.Build(System.Byte)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Guid"/> structure using the values represented by the specified hex values.
            </summary>
            <param name="hexFigure">A hexadecimal figure: 0 to 15 or 0x0 to 0xf.</param>
            <returns>A new instance with the information provided.</returns>
            /// <exception cref="T:Testing.Commons.GuidBuilder.NotHexadecimalException"><paramref name="hexFigure"/> is not a hexadecimal figure.</exception>
        </member>
        <member name="T:Testing.Commons.GuidBuilder.NotHexadecimalException">
            <summary>
            The exception that is thrown when the value of an argument is outside the allowable range of values as defined by the invoked method.
            </summary>
            <remarks>When a number or a number representation is not a hexadecimal figure.</remarks>
        </member>
        <member name="M:Testing.Commons.GuidBuilder.NotHexadecimalException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Testing.Commons.GuidBuilder.NotHexadecimalException"/> class.
            </summary>
        </member>
        <member name="M:Testing.Commons.GuidBuilder.NotHexadecimalException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Testing.Commons.GuidBuilder.NotHexadecimalException"/> class with the name of the parameter that causes this exception.
            </summary>
            <param name="paramName">The parameter name string.</param>
        </member>
        <member name="M:Testing.Commons.GuidBuilder.NotHexadecimalException.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Testing.Commons.GuidBuilder.NotHexadecimalException"/> class with a specified error message and the name of the parameter that causes this exception.
            </summary>
            <param name="paramName">The parameter name string.</param>
            <param name="message">The error message string.</param>
        </member>
        <member name="M:Testing.Commons.GuidBuilder.NotHexadecimalException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Testing.Commons.GuidBuilder.NotHexadecimalException"/> class with a specified error message and the exception that is the cause of this exception.
            </summary>
            <param name="message">The error message string.</param>
            <param name="innerException">The exception that is the cause of the current exception, or a null reference.</param>
        </member>
        <member name="M:Testing.Commons.GuidBuilder.NotHexadecimalException.#ctor(System.String,System.Object,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Testing.Commons.GuidBuilder.NotHexadecimalException"/> class with a specified error message, the parameter name, and the value of the argument.
            </summary>
            <param name="paramName">The parameter name string.</param>
            <param name="actualValue">The argument value.</param>
            <param name="message">The error message string.</param>
        </member>
        <member name="M:Testing.Commons.GuidBuilder.NotHexadecimalException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:System.ArgumentOutOfRangeException"/> class with serialized data.
            </summary>
            <param name="info">The object that holds the serialized object data.</param>
            <param name="context">An object that describes the source or destination of the serialized data.</param>
        </member>
        <member name="M:Testing.Commons.GuidBuilder.NotHexadecimalException.#ctor(System.String,System.Char)">
            <summary>
            Initializes a new instance of the <see cref="T:Testing.Commons.GuidBuilder.NotHexadecimalException"/> class with the parameter name and the value of the argument.
            </summary>
            <param name="paramName">The parameter name string.</param>
            <param name="notHex">The argument value.</param>
        </member>
        <member name="M:Testing.Commons.GuidBuilder.NotHexadecimalException.#ctor(System.String,System.Byte)">
            <summary>
            Initializes a new instance of the <see cref="T:Testing.Commons.GuidBuilder.NotHexadecimalException"/> class with the parameter name and the value of the argument.
            </summary>
            <param name="paramName">The parameter name string.</param>
            <param name="notHex">The argument value.</param>
        </member>
        <member name="T:Testing.Commons.Must">
            <summary>
            Allows easy extensibility of assertions for testing frameworks.
            </summary>
            <example>In NUnit:
            <code>Assert.That(2, Must.Be.Even())</code>
            where <c>.Even()</c> returns a custom assertion.</example>
        </member>
        <member name="P:Testing.Commons.Must.Contain">
            <summary>
            Allows meaningful extensions for elements of a group, for example, collections.
            </summary>
            <example>In NUnit:
            <code>Assert.That(new[]{1, 2, 3}, Must.Contain.ASingleEvenNumber())</code>
            where <c>.ASingleEvenNumber()</c> returns a custom assertion.</example>
        </member>
        <member name="P:Testing.Commons.Must.Have">
            <summary>
            Allows meaningful extensions for elements of a group, for example, a property out of many.
            </summary>
            <example>In NUnit:
            <code>Assert.That(aUri, Must.Have.Query())</code>
            where <c>.Query()</c> returns a custom assertion.</example>
        </member>
        <member name="P:Testing.Commons.Must.Be">
            <summary>
            Allows meaningful extensions for individual elements.
            </summary>
            <example>In NUnit:
            <code>Assert.That(2, Must.Be.Even())</code>
            where <c>.Even()</c> returns a custom assertion.</example>
        </member>
        <member name="P:Testing.Commons.Must.Satisfy">
            <summary>
            Allows meaningful extensions for constraints of individual elements.
            </summary>
            <example>In NUnit:
            <code>Assert.That(collection, Must.Satisfy.Uniqueness())</code>
            where <c>.Uniqueness()</c> returns a custom assertion.</example>
        </member>
        <member name="P:Testing.Commons.Must.Match">
            <summary>
            Allows meaningful extensions for partial constraints of individual elements.
            </summary>
            <example>In NUnit:
            <code>Assert.That("asd", Must.Match.String("as*"))</code>
            where <c>.String()</c> returns a custom assertion.</example>
        </member>
        <member name="P:Testing.Commons.Must.Raise">
            <summary>
            Allows meaningful extensions for types raising events.
            </summary>
            <example>In NUnit:
            <code>Assert.That(()=>instance.Property = value, Must.Raise.SomeEvent(instance, i => i.Property))</code>.
            </example>
        </member>
        <member name="T:Testing.Commons.Must.ContainEntryPoint">
            <summary>
            Allows meaningful extensions for elements of a group, for example, collections.
            </summary>
        </member>
        <member name="T:Testing.Commons.Must.NotContainEntryPoint">
            <summary>
            Allows meaningful negative extensions for elements of a group, for example, collections.
            </summary>
        </member>
        <member name="T:Testing.Commons.Must.HaveEntryPoint">
            <summary>
            Allows meaningful extensions for elements of a group, for example, a property out of many.
            </summary>
        </member>
        <member name="T:Testing.Commons.Must.NotHaveEntryPoint">
            <summary>
            Allows meaningful negative extensions for elements of a group, for example, a property out of many.
            </summary>
        </member>
        <member name="T:Testing.Commons.Must.BeEntryPoint">
            <summary>
            Allows meaningful extensions for individual elements.
            </summary>
        </member>
        <member name="T:Testing.Commons.Must.NotBeEntryPoint">
            <summary>
            Allows meaningful negative extensions for individual elements.
            </summary>
        </member>
        <member name="T:Testing.Commons.Must.SatisfyEntryPoint">
            <summary>
            Allows meaningful extensions for constraints of individual elements.
            </summary>
        </member>
        <member name="T:Testing.Commons.Must.NotSatisfyEntryPoint">
            <summary>
            Allows meaningful negative extensions for constraints of individual elements.
            </summary>
        </member>
        <member name="T:Testing.Commons.Must.MatchEntryPoint">
            <summary>
            Allows meaningful extensions for partial constraints of individual elements.
            </summary>
        </member>
        <member name="T:Testing.Commons.Must.NotMatchEntryPoint">
            <summary>
            Allows meaningful negative extensions for partial constraints of individual elements.
            </summary>
        </member>
        <member name="T:Testing.Commons.Must.RaiseEntryPoint">
            <summary>
            Allows meaningful extensions for constraints for event raising types.
            </summary>
        </member>
        <member name="T:Testing.Commons.Must.NotRaiseEntryPoint">
            <summary>
            Allows meaningful negative extensions for constraints for event raising types.
            </summary>
        </member>
        <member name="T:Testing.Commons.Must.Not">
            <summary>
            Allows easy extensibility of negative assertions for testing frameworks.
            </summary>
            <example>In NUnit:
            <code>Assert.That(2, Must.Not.Be.Even())</code>
            where <c>.Even()</c> returns a custom assertion.</example>
        </member>
        <member name="P:Testing.Commons.Must.Not.Contain">
            <summary>
            Allows meaningful negative extensions for elements of a group, for example, collections.
            </summary>
            <example>In NUnit:
            <code>Assert.That(new[]{1, 3, 5}, Must.Not.Contain.ASingleEvenNumber())</code>
            where <c>.ASingleEvenNumber()</c> returns a custom assertion.</example>
        </member>
        <member name="P:Testing.Commons.Must.Not.Have">
            <summary>
            Allows meaningful negative extensions for elements of a group, for example, a property out of many.
            </summary>
            <example>In NUnit:
            <code>Assert.That(aUri, Must.Not.Have.Query())</code>
            where <c>.Query()</c> returns a custom assertion.</example>
        </member>
        <member name="P:Testing.Commons.Must.Not.Be">
            <summary>
            Allows meaningful negative extensions for individual elements.
            </summary>
            <example>In NUnit:
            <code>Assert.That(3, Must.Not.Be.Even())</code>
            where <c>.Even()</c> returns a custom assertion.</example>
        </member>
        <member name="P:Testing.Commons.Must.Not.Satisfy">
            <summary>
            Allows meaningful negative extensions for constraints of individual elements.
            </summary>
            <example>In NUnit:
            <code>Assert.That(collection, Must.Not.Satisfy.Uniqueness())</code>
            where <c>.Uniqueness()</c> returns a custom assertion.</example>
        </member>
        <member name="P:Testing.Commons.Must.Not.Match">
            <summary>
            Allows meaningful negative extensions for partial constraints of individual elements.
            </summary>
            <example>In NUnit:
            <code>Assert.That("asd", Must.Not.Match.String("ds*"))</code>
            where <c>.String()</c> returns a custom assertion.</example>
        </member>
        <member name="P:Testing.Commons.Must.Not.Raise">
            <summary>
            Allows meaningful negative extensions for constraints for event raising types.
            </summary>
            <example>In NUnit:
            <code>Assert.That(()=>instance.Property = value, Must.Not.Raise.SomeEvent(instance, i => i.Property))</code>.
            </example>
        </member>
        <member name="T:Testing.Commons.Resources.Exceptions">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:Testing.Commons.Resources.Exceptions.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:Testing.Commons.Resources.Exceptions.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:Testing.Commons.Resources.Exceptions.InvertedRange_Template">
            <summary>
              Looks up a localized string similar to The end date has to occur later than the start date &apos;{0}&apos;..
            </summary>
        </member>
        <member name="P:Testing.Commons.Resources.Exceptions.MissingExternalConfigurationAssemblyAttribute_Template">
            <summary>
              Looks up a localized string similar to The test method needs to be decorated with a &apos;{0}&apos; attribute..
            </summary>
        </member>
        <member name="P:Testing.Commons.Resources.Exceptions.MissingExternalConfigurationAssemblyFile_Template">
            <summary>
              Looks up a localized string similar to The file &apos;{0}&apos; does not exist..
            </summary>
        </member>
        <member name="P:Testing.Commons.Resources.Exceptions.NotAnExternalConfigurationAssembly_Template">
            <summary>
              Looks up a localized string similar to The file &apos;{0}&apos; is not an assembly..
            </summary>
        </member>
        <member name="P:Testing.Commons.Resources.Exceptions.ParseableEventOperation">
            <summary>
              Looks up a localized string similar to Only subscriptions and unsubscriptions of events are supported..
            </summary>
        </member>
        <member name="P:Testing.Commons.Resources.Exceptions.UnorderedRangeBounds">
            <summary>
              Looks up a localized string similar to The start value of the range must not be greater than its end value..
            </summary>
        </member>
        <member name="T:Testing.Commons.Serialization.DataContractDeserializer">
            <summary>
            Allows testing a single cycle of deserialization using data contract serialization.
            </summary>
            <remarks>It uses <see cref="T:System.Runtime.Serialization.DataContractSerializer"/> to perform the deserialization.</remarks>
        </member>
        <member name="T:Testing.Commons.Serialization.IDeserializer">
            <summary>
            Allows testing a single cycle of deserialization.
            </summary>
        </member>
        <member name="M:Testing.Commons.Serialization.IDeserializer.Deserialize``1(System.String)">
            <summary>
            Deserializes the object represented by <paramref name="toDeserialize"/>.
            </summary>
            <param name="toDeserialize">String representation of the serialized object to be deserialized.</param>
            <typeparam name="T">Type to be deserialized.</typeparam>
            <returns>The deserialized object.</returns>
        </member>
        <member name="M:Testing.Commons.Serialization.DataContractDeserializer.Deserialize``1(System.String)">
            <summary>
            Deserializes the object represented by <paramref name="toDeserialize"/> using data contract serialization.
            </summary>
            <param name="toDeserialize">String representation of the serialized object to be data contract-deserialized.</param>
            <typeparam name="T">Type to be deserialized.</typeparam>
            <returns>The deserialized object.</returns>
        </member>
        <member name="T:Testing.Commons.Serialization.JsonDeserializer">
            <summary>
            Allows testing a single cycle of deserialization using JSON serialization.
            </summary>
            <remarks>It uses <see cref="T:System.Web.Script.Serialization.JavaScriptSerializer"/> to perform the deserialization.</remarks>
        </member>
        <member name="M:Testing.Commons.Serialization.JsonDeserializer.#ctor(System.Web.Script.Serialization.JavaScriptConverter[])">
            <summary>
            Creates an instance of <see cref="T:Testing.Commons.Serialization.JsonDeserializer"/>.
            </summary>
            <param name="converters">An array that contains the custom converters to be registered.</param>
        </member>
        <member name="M:Testing.Commons.Serialization.JsonDeserializer.Deserialize``1(System.String)">
            <summary>
            Deserializes the object represented by <paramref name="toDeserialize"/> using JSON serialization.
            </summary>
            <param name="toDeserialize">String representation of the serialized object to be JSON-deserialized.</param>
            <typeparam name="T">Type to be deserialized.</typeparam>
            <returns>The deserialized object.</returns>
        </member>
        <member name="T:Testing.Commons.Serialization.IRoundtripSerializer`1">
            <summary>
            Allows testing a single cycle of serialization and deserialization.
            </summary>
            <typeparam name="T">Type to be serialized and deserialized.</typeparam>
        </member>
        <member name="M:Testing.Commons.Serialization.IRoundtripSerializer`1.Serialize(`0)">
            <summary>
            Serializes the specified object, writting the output to the returned string.
            </summary>
            <param name="toSerialize">Object to be serialized.</param>
            <returns>The string representation of the serialized object.</returns>
        </member>
        <member name="M:Testing.Commons.Serialization.IRoundtripSerializer`1.Deserialize">
            <summary>
            Deserializes the previously serialized object (using <see cref="M:Testing.Commons.Serialization.IRoundtripSerializer`1.Serialize(`0)"/>).
            </summary>
            <remarks>This method must be called after <see cref="M:Testing.Commons.Serialization.IRoundtripSerializer`1.Serialize(`0)"/> as it is temporaly coupled to it.</remarks>
            <returns>The deserialized object.</returns>
        </member>
        <member name="T:Testing.Commons.Serialization.BinaryRoundtripSerializer`1">
            <summary>
            Allows testing a single cycle of serialization and deserialization using binary serialization.
            </summary>
            <remarks>It uses <see cref="T:System.Runtime.Serialization.Formatters.Binary.BinaryFormatter"/> to perform the serialization and deserialization.</remarks>
            <typeparam name="T">Type to be serialized and deserialized.</typeparam>
        </member>
        <member name="M:Testing.Commons.Serialization.BinaryRoundtripSerializer`1.#ctor">
            <summary>
            Creates an instance of <see cref="T:Testing.Commons.Serialization.BinaryRoundtripSerializer`1"/>
            </summary>
        </member>
        <member name="M:Testing.Commons.Serialization.BinaryRoundtripSerializer`1.Serialize(`0)">
            <summary>
            Serializes the specified object using binary serialization, writting the output to the returned string.
            </summary>
            <param name="toSerialize">Object to be binary-serialized.</param>
            <returns>The string representation of the serialized object.</returns>
        </member>
        <member name="M:Testing.Commons.Serialization.BinaryRoundtripSerializer`1.Deserialize">
            <summary>
            Deserializes the previously serialized object (using <see cref="M:Testing.Commons.Serialization.BinaryRoundtripSerializer`1.Serialize(`0)"/>) using binary serialization.
            </summary>
            <remarks>This method must be called after <see cref="M:Testing.Commons.Serialization.BinaryRoundtripSerializer`1.Serialize(`0)"/> as it is temporaly coupled to it.</remarks>
            <returns>The deserialized object.</returns>
        </member>
        <member name="M:Testing.Commons.Serialization.BinaryRoundtripSerializer`1.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
            <remarks>Closes and disposes internal serialization stream.</remarks>
        </member>
        <member name="T:Testing.Commons.Serialization.DataContractRoundtripSerializer`1">
            <summary>
            Allows testing a single cycle of serialization and deserialization using data contract serialization.
            </summary>
            <remarks>It uses <see cref="T:System.Runtime.Serialization.DataContractSerializer"/> to perform the serialization and deserialization.</remarks>
            <typeparam name="T">Type to be serialized and deserialized.</typeparam>
        </member>
        <member name="M:Testing.Commons.Serialization.DataContractRoundtripSerializer`1.#ctor">
            <summary>
            Creates an instance of <see cref="T:Testing.Commons.Serialization.DataContractRoundtripSerializer`1"/>
            </summary>
        </member>
        <member name="M:Testing.Commons.Serialization.DataContractRoundtripSerializer`1.Serialize(`0)">
            <summary>
            Serializes the specified object using data contract serialization, writting the output to the returned string.
            </summary>
            <param name="toSerialize">Object to be data contract-serialized.</param>
            <returns>The string representation of the serialized object.</returns>
        </member>
        <member name="M:Testing.Commons.Serialization.DataContractRoundtripSerializer`1.Deserialize">
            <summary>
            Deserializes the previously serialized object (using <see cref="M:Testing.Commons.Serialization.DataContractRoundtripSerializer`1.Serialize(`0)"/>) using data contract serialization.
            </summary>
            <remarks>This method must be called after <see cref="M:Testing.Commons.Serialization.DataContractRoundtripSerializer`1.Serialize(`0)"/> as it is temporaly coupled to it.</remarks>
            <returns>The deserialized object.</returns>
        </member>
        <member name="M:Testing.Commons.Serialization.DataContractRoundtripSerializer`1.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
            <remarks>Closes and disposes internal serialization stream.</remarks>
        </member>
        <member name="T:Testing.Commons.Serialization.JsonRoundtripSerializer`1">
            <summary>
            Allows testing a single cycle of serialization and deserialization using JSON serialization.
            </summary>
            <remarks>It uses <see cref="T:System.Web.Script.Serialization.JavaScriptSerializer"/> to perform the serialization and deserialization.</remarks>
            <typeparam name="T">Type to be serialized and deserialized.</typeparam>
        </member>
        <member name="M:Testing.Commons.Serialization.JsonRoundtripSerializer`1.#ctor(System.Web.Script.Serialization.JavaScriptConverter[])">
            <summary>
            Creates an instance of <see cref="T:Testing.Commons.Serialization.JsonRoundtripSerializer`1"/>
            </summary>
            <param name="converters">An array that contains the custom converters to be registered.</param>
        </member>
        <member name="M:Testing.Commons.Serialization.JsonRoundtripSerializer`1.Serialize(`0)">
            <summary>
            Serializes the specified object using JSON serialization, writting the output to the returned string.
            </summary>
            <param name="toSerialize">Object to be data JSON-serialized.</param>
            <returns>The string representation of the serialized object.</returns>
        </member>
        <member name="M:Testing.Commons.Serialization.JsonRoundtripSerializer`1.Deserialize">
            <summary>
            Deserializes the previously serialized object (using <see cref="M:Testing.Commons.Serialization.JsonRoundtripSerializer`1.Serialize(`0)"/>) using JSON serialization.
            </summary>
            <remarks>This method must be called after <see cref="M:Testing.Commons.Serialization.JsonRoundtripSerializer`1.Serialize(`0)"/> as it is temporaly coupled to it.</remarks>
            <returns>The deserialized object.</returns>
        </member>
        <member name="M:Testing.Commons.Serialization.JsonRoundtripSerializer`1.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="T:Testing.Commons.Serialization.XmlDeserializer">
            <summary>
            Allows testing a single cycle of deserialization using XML serialization.
            </summary>
            <remarks>It uses <see cref="T:System.Xml.Serialization.XmlSerializer"/> to perform the deserialization.</remarks>
        </member>
        <member name="M:Testing.Commons.Serialization.XmlDeserializer.Deserialize``1(System.String)">
            <summary>
            Deserializes the object represented by <paramref name="toDeserialize"/> using XML serialization.
            </summary>
            <param name="toDeserialize">String representation of the serialized object to be XML-deserialized.</param>
            <typeparam name="T">Type to be deserialized.</typeparam>
            <returns>The deserialized object.</returns>
        </member>
        <member name="T:Testing.Commons.Serialization.XmlRoundtripSerializer`1">
            <summary>
            Allows testing a single cycle of serialization and deserialization using XML serialization.
            </summary>
            <remarks>It uses <see cref="T:System.Xml.Serialization.XmlSerializer"/> to perform the serialization and deserialization.</remarks>
            <typeparam name="T">Type to be serialized and deserialized.</typeparam>
        </member>
        <member name="M:Testing.Commons.Serialization.XmlRoundtripSerializer`1.#ctor">
            <summary>
            Creates an instance of <see cref="T:Testing.Commons.Serialization.XmlRoundtripSerializer`1"/>
            </summary>
        </member>
        <member name="M:Testing.Commons.Serialization.XmlRoundtripSerializer`1.Serialize(`0)">
            <summary>
            Serializes the specified object using XML serialization, writting the output to the returned string.
            </summary>
            <param name="toSerialize">Object to be data XML-serialized.</param>
            <returns>The string representation of the serialized object.</returns>
        </member>
        <member name="M:Testing.Commons.Serialization.XmlRoundtripSerializer`1.Deserialize">
            <summary>
            Deserializes the previously serialized object (using <see cref="M:Testing.Commons.Serialization.XmlRoundtripSerializer`1.Serialize(`0)"/>) using XML serialization.
            </summary>
            <remarks>This method must be called after <see cref="M:Testing.Commons.Serialization.XmlRoundtripSerializer`1.Serialize(`0)"/> as it is temporaly coupled to it.</remarks>
            <returns>The deserialized object.</returns>
        </member>
        <member name="M:Testing.Commons.Serialization.XmlRoundtripSerializer`1.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
            <remarks>Closes and disposes internal serialization stream.</remarks>
        </member>
        <member name="T:Testing.Commons.StringGenerator">
            <summary>
            Allows generating strings with different patterns and different lengths.
            </summary>
        </member>
        <member name="M:Testing.Commons.StringGenerator.Numeric(System.UInt32)">
            <summary>
            Generates a string with the pattern {0123456789} for the given length.
            </summary>
            <param name="length">The number of characters of the string generated.</param>
            <returns>A string of <paramref name="length"/> characters with figures.</returns>
            <example><code>
            .Numeric(2) --> "01"
            .Numeric(10) --> "0123456789"
            </code></example>
        </member>
        <member name="M:Testing.Commons.StringGenerator.RepeatPattern(System.String,System.UInt32)">
            <summary>
            Generates a string with the provided pattern for the given length.
            </summary>
            <param name="pattern">The  sequence of characters to loop.</param>
            <param name="length">The number of characters of the string generated.</param>
            <returns>A string of <paramref name="length"/> characters with characters from the pattern.</returns>
            <example><code>
            .RepeatPattern("abc", 2) --> "ab"
            .RepeatPattern("abc", 5) --> "abcab"
            </code></example>
        </member>
        <member name="T:Testing.Commons.Time.DateExtensions">
            <summary>
            Allows expressive creation of <see cref="T:System.DateTime"/> instances that represent a date.
            </summary>
            <example><code>11.March(1977)</code></example>
        </member>
        <member name="M:Testing.Commons.Time.DateExtensions.January(System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:System.DateTime"/> structure to the specified year and day in January.
            </summary>
            <remarks>Year, month, and day are interpreted as a year, month, and day in the Gregorian calendar.
            The time of day for the resulting <see cref="T:System.DateTime"/> is midnight (00:00:00). The <see cref="P:System.DateTime.Kind"/> property is initialized to
            <see cref="F:System.DateTimeKind.Unspecified"/>.</remarks>
            <param name="day">The day (1 through the number of days in month).</param>
            <param name="year">The year (1 through 9999).</param>
            <returns>A new instance with the information provided.</returns>
        </member>
        <member name="M:Testing.Commons.Time.DateExtensions.February(System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:System.DateTime"/> structure to the specified year and day in February.
            </summary>
            <remarks>Year, month, and day are interpreted as a year, month, and day in the Gregorian calendar.
            The time of day for the resulting <see cref="T:System.DateTime"/> is midnight (00:00:00). The <see cref="P:System.DateTime.Kind"/> property is initialized to
            <see cref="F:System.DateTimeKind.Unspecified"/>.</remarks>
            <param name="day">The day (1 through the number of days in month).</param>
            <param name="year">The year (1 through 9999).</param>
            <returns>A new instance with the information provided.</returns>
        </member>
        <member name="M:Testing.Commons.Time.DateExtensions.March(System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:System.DateTime"/> structure to the specified year and day in March.
            </summary>
            <remarks>Year, month, and day are interpreted as a year, month, and day in the Gregorian calendar.
            The time of day for the resulting <see cref="T:System.DateTime"/> is midnight (00:00:00). The <see cref="P:System.DateTime.Kind"/> property is initialized to
            <see cref="F:System.DateTimeKind.Unspecified"/>.</remarks>
            <param name="day">The day (1 through the number of days in month).</param>
            <param name="year">The year (1 through 9999).</param>
            <returns>A new instance with the information provided.</returns>
        </member>
        <member name="M:Testing.Commons.Time.DateExtensions.April(System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:System.DateTime"/> structure to the specified year and day in April.
            </summary>
            <remarks>Year, month, and day are interpreted as a year, month, and day in the Gregorian calendar.
            The time of day for the resulting <see cref="T:System.DateTime"/> is midnight (00:00:00). The <see cref="P:System.DateTime.Kind"/> property is initialized to
            <see cref="F:System.DateTimeKind.Unspecified"/>.</remarks>
            <param name="day">The day (1 through the number of days in month).</param>
            <param name="year">The year (1 through 9999).</param>
            <returns>A new instance with the information provided.</returns>
        </member>
        <member name="M:Testing.Commons.Time.DateExtensions.May(System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:System.DateTime"/> structure to the specified year and day in May.
            </summary>
            <remarks>Year, month, and day are interpreted as a year, month, and day in the Gregorian calendar.
            The time of day for the resulting <see cref="T:System.DateTime"/> is midnight (00:00:00). The <see cref="P:System.DateTime.Kind"/> property is initialized to
            <see cref="F:System.DateTimeKind.Unspecified"/>.</remarks>
            <param name="day">The day (1 through the number of days in month).</param>
            <param name="year">The year (1 through 9999).</param>
            <returns>A new instance with the information provided.</returns>
        </member>
        <member name="M:Testing.Commons.Time.DateExtensions.June(System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:System.DateTime"/> structure to the specified year and day in June.
            </summary>
            <remarks>Year, month, and day are interpreted as a year, month, and day in the Gregorian calendar.
            The time of day for the resulting <see cref="T:System.DateTime"/> is midnight (00:00:00). The <see cref="P:System.DateTime.Kind"/> property is initialized to
            <see cref="F:System.DateTimeKind.Unspecified"/>.</remarks>
            <param name="day">The day (1 through the number of days in month).</param>
            <param name="year">The year (1 through 9999).</param>
            <returns>A new instance with the information provided.</returns>
        </member>
        <member name="M:Testing.Commons.Time.DateExtensions.July(System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:System.DateTime"/> structure to the specified year and day in July.
            </summary>
            <remarks>Year, month, and day are interpreted as a year, month, and day in the Gregorian calendar.
            The time of day for the resulting <see cref="T:System.DateTime"/> is midnight (00:00:00). The <see cref="P:System.DateTime.Kind"/> property is initialized to
            <see cref="F:System.DateTimeKind.Unspecified"/>.</remarks>
            <param name="day">The day (1 through the number of days in month).</param>
            <param name="year">The year (1 through 9999).</param>
            <returns>A new instance with the information provided.</returns>
        </member>
        <member name="M:Testing.Commons.Time.DateExtensions.August(System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:System.DateTime"/> structure to the specified year and day in August.
            </summary>
            <remarks>Year, month, and day are interpreted as a year, month, and day in the Gregorian calendar.
            The time of day for the resulting <see cref="T:System.DateTime"/> is midnight (00:00:00). The <see cref="P:System.DateTime.Kind"/> property is initialized to
            <see cref="F:System.DateTimeKind.Unspecified"/>.</remarks>
            <param name="day">The day (1 through the number of days in month).</param>
            <param name="year">The year (1 through 9999).</param>
            <returns>A new instance with the information provided.</returns>
        </member>
        <member name="M:Testing.Commons.Time.DateExtensions.September(System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:System.DateTime"/> structure to the specified year and day in September.
            </summary>
            <remarks>Year, month, and day are interpreted as a year, month, and day in the Gregorian calendar.
            The time of day for the resulting <see cref="T:System.DateTime"/> is midnight (00:00:00). The <see cref="P:System.DateTime.Kind"/> property is initialized to
            <see cref="F:System.DateTimeKind.Unspecified"/>.</remarks>
            <param name="day">The day (1 through the number of days in month).</param>
            <param name="year">The year (1 through 9999).</param>
            <returns>A new instance with the information provided.</returns>
        </member>
        <member name="M:Testing.Commons.Time.DateExtensions.October(System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:System.DateTime"/> structure to the specified year and day in October.
            </summary>
            <remarks>Year, month, and day are interpreted as a year, month, and day in the Gregorian calendar.
            The time of day for the resulting <see cref="T:System.DateTime"/> is midnight (00:00:00). The <see cref="P:System.DateTime.Kind"/> property is initialized to
            <see cref="F:System.DateTimeKind.Unspecified"/>.</remarks>
            <param name="day">The day (1 through the number of days in month).</param>
            <param name="year">The year (1 through 9999).</param>
            <returns>A new instance with the information provided.</returns>
        </member>
        <member name="M:Testing.Commons.Time.DateExtensions.November(System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:System.DateTime"/> structure to the specified year and day in November.
            </summary>
            <remarks>Year, month, and day are interpreted as a year, month, and day in the Gregorian calendar.
            The time of day for the resulting <see cref="T:System.DateTime"/> is midnight (00:00:00). The <see cref="P:System.DateTime.Kind"/> property is initialized to
            <see cref="F:System.DateTimeKind.Unspecified"/>.</remarks>
            <param name="day">The day (1 through the number of days in month).</param>
            <param name="year">The year (1 through 9999).</param>
            <returns>A new instance with the information provided.</returns>
        </member>
        <member name="M:Testing.Commons.Time.DateExtensions.December(System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:System.DateTime"/> structure to the specified year and day in December.
            </summary>
            <remarks>Year, month, and day are interpreted as a year, month, and day in the Gregorian calendar.
            The time of day for the resulting <see cref="T:System.DateTime"/> is midnight (00:00:00). The <see cref="P:System.DateTime.Kind"/> property is initialized to
            <see cref="F:System.DateTimeKind.Unspecified"/>.</remarks>
            <param name="day">The day (1 through the number of days in month).</param>
            <param name="year">The year (1 through 9999).</param>
            <returns>A new instance with the information provided.</returns>
        </member>
        <member name="T:Testing.Commons.Time.Generate">
            <summary>
            Allows random generation of constrained dates.
            </summary>
        </member>
        <member name="M:Testing.Commons.Time.Generate.Between(System.DateTime)">
            <summary>
            Allows setting the lower bound of the dates generated.
            </summary>
            <param name="from">Minimum date to be generated.</param>
            <returns></returns>
        </member>
        <member name="T:Testing.Commons.Time.Generate.DateGeneratorBuilder">
            <summary>
            Infrastructure class that allows setting the upper bound of the dates generated.
            </summary>
        </member>
        <member name="M:Testing.Commons.Time.Generate.DateGeneratorBuilder.And(System.DateTime)">
            <summary>
            Sets the upper bound of the dates generated.
            </summary>
            <param name="to">Maximum date to be generated.</param>
            <returns></returns>
        </member>
        <member name="T:Testing.Commons.Time.Generate.DateGeneratorBuilder.DateGenerator">
            <summary>
            Infrastructure class that allows access to the generation methods.
            </summary>
        </member>
        <member name="M:Testing.Commons.Time.Generate.DateGeneratorBuilder.DateGenerator.Single">
            <summary>
            Generates a single random date between the defined lower and upper bounds.
            </summary>
            <returns>A date between the defined ranges.</returns>
        </member>
        <member name="M:Testing.Commons.Time.Generate.DateGeneratorBuilder.DateGenerator.Stream">
            <summary>
            Generated an infinite succession of random dates between the defined lower and upper bounds.
            </summary>
            <returns>An infinite series of dates between the defined ranges.</returns>
        </member>
        <member name="M:Testing.Commons.Time.Generate.DateGeneratorBuilder.DateGenerator.Stream(System.Int32)">
            <summary>
            Generated a finite succession of random dates between the defined lower and upper bounds.
            </summary>
            <param name="count">The number of dates to be generated.</param>
            <returns>A finite series of dates between the defined ranges.</returns>
        </member>
        <member name="T:Testing.Commons.Time.OffsetExtensions">
            <summary>
            Allows expressive creation of <see cref="T:System.DateTimeOffset"/> instances.
            </summary>
            <example><code>11.March(1977).In(TimeSpan.FromHours(1))</code></example>
        </member>
        <member name="M:Testing.Commons.Time.OffsetExtensions.In(System.DateTime,System.TimeSpan)">
            <summary>
            Initializes a new instance of the <see cref="T:System.DateTimeOffset"/> structure using the specified <see cref="T:System.DateTime"/> values and offset.
            </summary>
            <param name="dt">A date and time.</param>
            <param name="offset">The time's offset from Coordinated Universal Time (UTC).</param>
            <returns>A new instance with the information provided.</returns>
        </member>
        <member name="M:Testing.Commons.Time.OffsetExtensions.InUtc(System.DateTime)">
            <summary>
            Initializes a new instance of the <see cref="T:System.DateTimeOffset"/> structure using the specified <see cref="T:System.DateTime"/> values and an offset of <see cref="F:System.TimeSpan.Zero"/>.
            </summary>
            <param name="dt">A date and time.</param>
            <returns>A new instance in the Coordinated Universal Time (UTC) with the information provided.</returns>
        </member>
        <member name="T:Testing.Commons.Time.SpanExtensions">
            <summary>
            Allows expressive creation of <see cref="T:System.TimeSpan"/> instances.
            </summary>
            <example><code>3.Hours()</code>
            <code>5.Days().Hours(4).Minutes(3)</code></example>
        </member>
        <member name="M:Testing.Commons.Time.SpanExtensions.Weeks(System.Int32)">
            <summary>
            Returns a <see cref="T:System.TimeSpan"/> that represents a specified number of weeks, where a week is assumed to have 7 days.
            </summary>
            <param name="value">A number of weeks.</param>
            <returns>An object that represents value.</returns>
        </member>
        <member name="M:Testing.Commons.Time.SpanExtensions.Weeks(System.Int32,System.TimeSpan)">
            <summary>
            Adds the specified <see cref="T:System.TimeSpan"/> to the one represented by the specified number of weeks, where a week is assumed to have 7 days.
            </summary>
            <remarks>Enables method chaining in order to expressively create instances.</remarks>
            <param name="value">A number of weeks.</param>
            <param name="ts">The time interval to add.</param>
            <returns>An object that represents value plus the value of <paramref name="ts"/>.</returns>
        </member>
        <member name="M:Testing.Commons.Time.SpanExtensions.Days(System.Int32)">
            <summary>
            Returns a <see cref="T:System.TimeSpan"/> that represents a specified number of days.
            </summary>
            <param name="value">A number of days.</param>
            <returns>An object that represents value.</returns>
        </member>
        <member name="M:Testing.Commons.Time.SpanExtensions.Days(System.Int32,System.TimeSpan)">
            <summary>
            Adds the specified <see cref="T:System.TimeSpan"/> to the one represented by the specified number of days.
            </summary>
            <remarks>Enables method chaining in order to expressively create instances.</remarks>
            <param name="value">A number of days.</param>
            <param name="ts">The time interval to add.</param>
            <returns>An object that represents value plus the value of <paramref name="ts"/>.</returns>
        </member>
        <member name="M:Testing.Commons.Time.SpanExtensions.Hours(System.Int32)">
            <summary>
            Returns a <see cref="T:System.TimeSpan"/> that represents a specified number of hours.
            </summary>
            <param name="value">A number of hours.</param>
            <returns>An object that represents value.</returns>
        </member>
        <member name="M:Testing.Commons.Time.SpanExtensions.Hours(System.Int32,System.TimeSpan)">
            <summary>
            Adds the specified <see cref="T:System.TimeSpan"/> to the one represented by the specified number of hours.
            </summary>
            <remarks>Enables method chaining in order to expressively create instances.</remarks>
            <param name="value">A number of hours.</param>
            <param name="ts">The time interval to add.</param>
            <returns>An object that represents value plus the value of <paramref name="ts"/>.</returns>
        </member>
        <member name="M:Testing.Commons.Time.SpanExtensions.Minutes(System.Int32)">
            <summary>
            Returns a <see cref="T:System.TimeSpan"/> that represents a specified number of minutes.
            </summary>
            <param name="value">A number of minutes.</param>
            <returns>An object that represents value.</returns>
        </member>
        <member name="M:Testing.Commons.Time.SpanExtensions.Minutes(System.Int32,System.TimeSpan)">
            <summary>
            Adds the specified <see cref="T:System.TimeSpan"/> to the one represented by the specified number of minutes.
            </summary>
            <remarks>Enables method chaining in order to expressively create instances.</remarks>
            <param name="value">A number of minutes.</param>
            <param name="ts">The time interval to add.</param>
            <returns>An object that represents value plus the value of <paramref name="ts"/>.</returns>
        </member>
        <member name="M:Testing.Commons.Time.SpanExtensions.Seconds(System.Int32)">
            <summary>
            Returns a <see cref="T:System.TimeSpan"/> that represents a specified number of hours.
            </summary>
            <param name="value">A number of seconds.</param>
            <returns>An object that represents value.</returns>
        </member>
        <member name="M:Testing.Commons.Time.SpanExtensions.Seconds(System.Int32,System.TimeSpan)">
            <summary>
            Adds the specified <see cref="T:System.TimeSpan"/> to the one represented by the specified number of seconds.
            </summary>
            <remarks>Enables method chaining in order to expressively create instances.</remarks>
            <param name="value">A number of seconds.</param>
            <param name="ts">The time interval to add.</param>
            <returns>An object that represents value plus the value of <paramref name="ts"/>.</returns>
        </member>
        <member name="M:Testing.Commons.Time.SpanExtensions.Milliseconds(System.Int32)">
            <summary>
            Returns a <see cref="T:System.TimeSpan"/> that represents a specified number of milliseconds.
            </summary>
            <param name="value">A number of value.</param>
            <returns>An object that represents value.</returns>
        </member>
        <member name="M:Testing.Commons.Time.SpanExtensions.Milliseconds(System.Int32,System.TimeSpan)">
            <summary>
            Returns a <see cref="T:System.TimeSpan"/> that represents a specified number of milliseconds.
            </summary>
            <remarks>Enables method chaining in order to expressively create instances.</remarks>
            <param name="value">A number of value.</param>
            <param name="ts">The time interval to add.</param>
            <returns>An object that represents value plus the value of <paramref name="ts"/>.</returns>
        </member>
        <member name="M:Testing.Commons.Time.SpanExtensions.Days(System.TimeSpan,System.Int32)">
            <summary>
            Returns a <see cref="T:System.TimeSpan"/> with the the information from the passed interval and the specified number of days.
            </summary>
            <remarks>Enables method chaining in order to expressively create instances.</remarks>
            <param name="ts">The interval that contains the information.</param>
            <param name="days">A number of days.</param>
            <returns>A new instance with the information of <paramref name="ts"/> and the specified number of days.</returns>
        </member>
        <member name="M:Testing.Commons.Time.SpanExtensions.Hours(System.TimeSpan,System.Int32)">
            <summary>
            Returns a <see cref="T:System.TimeSpan"/> with the the information from the passed interval and the specified number of hours.
            </summary>
            <remarks>Enables method chaining in order to expressively create instances.</remarks>
            <param name="ts">The interval that contains the information.</param>
            <param name="hours">A number of hours.</param>
            <returns>A new instance with the information of <paramref name="ts"/> and the specified number of hours.</returns>
        </member>
        <member name="M:Testing.Commons.Time.SpanExtensions.Minutes(System.TimeSpan,System.Int32)">
            <summary>
            Returns a <see cref="T:System.TimeSpan"/> with the the information from the passed interval and the specified number of minutes.
            </summary>
            <remarks>Enables method chaining in order to expressively create instances.</remarks>
            <param name="ts">The interval that contains the information.</param>
            <param name="minutes">A number of minutes.</param>
            <returns>A new instance with the information of <paramref name="ts"/> and the specified number of minutes.</returns>
        </member>
        <member name="M:Testing.Commons.Time.SpanExtensions.Seconds(System.TimeSpan,System.Int32)">
            <summary>
            Returns a <see cref="T:System.TimeSpan"/> with the the information from the passed interval and the specified number of seconds.
            </summary>
            <remarks>Enables method chaining in order to expressively create instances.</remarks>
            <param name="ts">The interval that contains the information.</param>
            <param name="seconds">A number of seconds.</param>
            <returns>A new instance with the information of <paramref name="ts"/> and the specified number of seconds.</returns>
        </member>
        <member name="M:Testing.Commons.Time.SpanExtensions.Milliseconds(System.TimeSpan,System.Int32)">
            <summary>
            Returns a <see cref="T:System.TimeSpan"/> with the the information from the passed interval and the specified number of milliseconds.
            </summary>
            <remarks>Enables method chaining in order to expressively create instances.</remarks>
            <param name="ts">The interval that contains the information.</param>
            <param name="milliseconds">A number of milliseconds.</param>
            <returns>A new instance with the information of <paramref name="ts"/> and the specified number of milliseconds.</returns>
        </member>
        <member name="M:Testing.Commons.Time.SpanExtensions.Before(System.TimeSpan,System.DateTimeOffset)">
            <summary>
            Subtracts a specified time interval from the specified date and time, and yields a new date and time.
            </summary>
            <param name="ts">The time interval to subtract .</param>
            <param name="dt">The date and time object to subtract from.</param>
            <returns>A new instance whose value is the difference of the values of <paramref name="dt"/> and <paramref name="ts"/>.</returns>
        </member>
        <member name="M:Testing.Commons.Time.SpanExtensions.After(System.TimeSpan,System.DateTimeOffset)">
            <summary>
            Adds a specified time interval to the specified date and time, and yields a new a date and time.
            </summary>
            <param name="ts">The time interval to add.</param>
            <param name="dt">The object to add the time interval to.</param>
            <returns>A new instance whose value is the sum of the values of <paramref name="dt"/> and <paramref name="ts"/>.</returns>
        </member>
        <member name="T:Testing.Commons.Time.TimeExtensions">
            <summary>
            Allows expressive creation of <see cref="T:System.DateTime"/> instances that represent a date and a time.
            </summary>
            <example><code>11.March(1977).At(15, 35)</code></example>
        </member>
        <member name="M:Testing.Commons.Time.TimeExtensions.At(System.DateTime,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:System.DateTime"/> structure to year, month, day specified by the date and the specified hour, minute, second, and millisecond.
            </summary>
            <param name="dt">The date that contains the years, months and days.</param>
            <param name="hour">The hours (0 through 23).</param>
            <param name="minute">The minutes (0 through 59).</param>
            <param name="second">The seconds (0 through 59).</param>
            <param name="miliSecond">The milliseconds (0 through 999).</param>
            <returns>A new instance with the information provided.</returns>
        </member>
        <member name="M:Testing.Commons.Time.TimeExtensions.At(System.DateTime,System.TimeSpan)">
            <summary>
            Initializes a new instance of the <see cref="T:System.DateTime"/> structure to year, month, day specified by the date
            and the hour, minute, second, and millisecond specified in the interval.
            </summary>
            <remarks>The days of the interval are ignored.</remarks>
            <param name="dt">The date that contains the years, months and days.</param>
            <param name="span">The interval that contains the hours, minutes, seconds and milliseconds.</param>
            <returns>A new instance with the information provided.</returns>
        </member>
        <member name="M:Testing.Commons.Time.TimeExtensions.At(System.DateTime,System.Func{Testing.Commons.Time.TimeExtensions.TimeOfDay,System.TimeSpan})">
            <summary>
            Initializes a new instance of the <see cref="T:System.DateTime"/> structure to year, month, day specified by the date
            and the hour, minute, second, and millisecond specified in the named interval.
            </summary>
            <param name="dt">The date that contains the years, months and days.</param>
            <param name="timeOfDay">Represents a named time of the day.</param>
            <returns>A new instance with the information provided.</returns>
        </member>
        <member name="T:Testing.Commons.Time.TimeExtensions.TimeOfDay">
            <summary>
            Represents named times of the day.
            </summary>
        </member>
        <member name="F:Testing.Commons.Time.TimeExtensions.TimeOfDay.Noon">
            <summary>
            Midday, twolve o'clock.
            </summary>
        </member>
        <member name="F:Testing.Commons.Time.TimeExtensions.TimeOfDay.MidNight">
            <summary>
            Middle of the night, twelve o'clock at night.
            </summary>
        </member>
        <member name="F:Testing.Commons.Time.TimeExtensions.TimeOfDay.EndOfDay">
            <summary>
            The last time of a given day to the millisecond
            </summary>
        </member>
        <member name="F:Testing.Commons.Time.TimeExtensions.TimeOfDay.BeginningOfDay">
            <summary>
            Middle of the night, twelve o'clock at night.
            </summary>
        </member>
        <member name="T:Testing.Commons.Web.ControlLifecycle">
            <summary>
            Eases testing implementations of <see cref="T:System.Web.UI.Control"/>.
            </summary>
            <remarks>Controls react to different events during their lifecycle. Those events are usually raisedv by implementations of protected methods and,
            therefore, cannot be directly invoked from outside the class. By hiding the complexity of those reflection calls, testing of controls is easier to achieve.</remarks>
        </member>
        <member name="M:Testing.Commons.Web.ControlLifecycle.Fake``1(``0,System.Action{``0})">
            <summary>
            Simulates the raise of a given event in a strongly-typed fashion.
            </summary>
            <remarks>In reality, when the event is fired, some methods in the implementation are called.
            <para>When testing, the non-public method that would be called when the real event fired is called using reflection with default values for each argument.</para></remarks>
            <param name="control">The subject of the test.</param>
            <param name="step">The event that we want to simulate.</param>
            <typeparam name="TControl">Type of the subject of the test.</typeparam>
        </member>
        <member name="M:Testing.Commons.Web.ControlLifecycle.Fake``1(``0,System.Action{``0},System.Object[])">
            <summary>
            Simulates the raise of a given event in a strongly-typed fashion.
            </summary>
            <remarks>In reality, when the event is fired, some methods in the implementation are called.
            <para>When testing, the non-public method that would be called when the real event fired is called using reflection with the provided argument values.</para></remarks>
            <param name="control">The subject of the test.</param>
            <param name="step">The event that we want to simulate.</param>
            <param name="stepArguments">Arguments for the non-public method that will be called when the event is simulated.</param>
            <typeparam name="TControl">Type of the subject of the test.</typeparam>
        </member>
        <member name="M:Testing.Commons.Web.ControlLifecycle.Call``1(``0,System.String)">
            <summary>
            Calls a non-public method directly.
            </summary>
            <remarks>Sometimes, important methods are not the direct result of an event and yet they are called during the lyfecycle of the control.
            This method eases calling them with default values for each argument.</remarks>
            <typeparam name="TControl">Type of the subject of the test.</typeparam>
            <param name="control">The subject of the test.</param>
            <param name="methodName">Name of the method to invoke.</param>
        </member>
        <member name="M:Testing.Commons.Web.ControlLifecycle.Call``1(``0,System.String,System.Object[])">
            <summary>
            Calls a non-public method directly.
            </summary>
            <remarks>Sometimes, important methods are not the direct result of an event and yet they are called during the lyfecycle of the control.
            This method eases calling them with default values for each argument.</remarks>
            <typeparam name="TControl">Type of the subject of the test.</typeparam>
            <param name="control">The subject of the test.</param>
            <param name="methodName">Name of the method to invoke.</param>
            <param name="methodArguments">Arguments of the method.</param>
        </member>
        <member name="T:Testing.Commons.Web.HttpContextBuilder">
            <summary>
            Allows building custom instances of <see cref="T:System.Web.HttpContext"/>
            </summary>
        </member>
        <member name="M:Testing.Commons.Web.HttpContextBuilder.#ctor">
            <summary>
            Creates a new instance of the builder.
            </summary>
        </member>
        <member name="M:Testing.Commons.Web.HttpContextBuilder.AddToSession(System.String,System.Object)">
            <summary>
            Adds an item to <see cref="P:System.Web.HttpContext.Session"/>.
            </summary>
            <param name="key">The name of the item to add to the session-state collection.</param>
            <param name="value">The value of the item to add to the session-state collection.</param>
            <returns>This instance of the builder.</returns>
        </member>
        <member name="M:Testing.Commons.Web.HttpContextBuilder.AddToItems(System.Object,System.Object)">
            <summary>
            Adds an element to <see cref="P:System.Web.HttpContext.Items"/>.
            </summary>
            <param name="key">The <see cref="T:System.Object"/> to use as the key of the element to add.</param>
            <param name="value">The <see cref="T:System.Object"/> to use as the value of the element to add. </param>
            <returns>This instance of the builder.</returns>
        </member>
        <member name="M:Testing.Commons.Web.HttpContextBuilder.AddToItems(System.Collections.IDictionary)">
            <summary>
            Adds multiple elements to <see cref="P:System.Web.HttpContext.Items"/>.
            </summary>
            <param name="items">The elements to be added.</param>
            <returns>This instance of the builder.</returns>
        </member>
        <member name="M:Testing.Commons.Web.HttpContextBuilder.AddToApplication(System.String,System.Object)">
            <summary>
            Adds an object to <see cref="P:System.Web.HttpContext.Application"/>.
            </summary>
            <param name="key">The name of the object to be added to the collection.</param>
            <param name="value">The value of the object.</param>
            <returns>This instance of the builder.</returns>
        </member>
        <member name="M:Testing.Commons.Web.HttpContextBuilder.OuputWrittenTo(System.Text.StringBuilder)">
            <summary>
            Gives access to the output of <see cref="P:System.Web.HttpContext.Response"/>.
            </summary>
            <param name="sb">The StringBuilder to write to.</param>
            <returns>This instance of the builder.</returns>
        </member>
        <member name="P:Testing.Commons.Web.HttpContextBuilder.Request">
            <summary>
            Allows customizing elements of <see cref="P:System.Web.HttpContext.Request"/>.
            </summary>
        </member>
        <member name="P:Testing.Commons.Web.HttpContextBuilder.Context">
            <summary>
            The custom built instance.
            </summary>
        </member>
        <member name="T:Testing.Commons.Web.HttpContextReseter">
            <summary>
            Allows setting the <see cref="P:System.Web.HttpContext.Current"/> property to a custom built instance during the scope if the instance.
            </summary>
        </member>
        <member name="M:Testing.Commons.Web.HttpContextReseter.Set(Testing.Commons.Web.HttpContextBuilder)">
            <summary>
            Sets the instance built by the <paramref name="builder"/>
            </summary>
            <param name="builder">Builder of the <see cref="T:System.Web.HttpContext"/> instance.</param>
            <returns>A scope object that resets the <see cref="P:System.Web.HttpContext.Current"/> after is disposed.</returns>
        </member>
        <member name="M:Testing.Commons.Web.HttpContextReseter.Set(Testing.Commons.Web.HttpRequestBuilder)">
            <summary>
            Sets the instance built by the <paramref name="builder"/>
            </summary>
            <param name="builder">Builder of the <see cref="T:System.Web.HttpContext"/> instance.</param>
            <returns>A scope object that resets the <see cref="P:System.Web.HttpContext.Current"/> after is disposed.</returns>
        </member>
        <member name="M:Testing.Commons.Web.HttpContextReseter.Set(System.Web.HttpContext)">
            <summary>
            Sets the instance in <paramref name="context"/>
            </summary>
            <param name="context"><see cref="T:System.Web.HttpContext"/> instance.</param>
            <returns>A scope object that resets the <see cref="P:System.Web.HttpContext.Current"/> after is disposed.</returns>
        </member>
        <member name="M:Testing.Commons.Web.HttpContextReseter.Finalize">
            <summary>
            Resets <see cref="P:System.Web.HttpContext.Current"/> to <c>null</c>.
            </summary>
        </member>
        <member name="M:Testing.Commons.Web.HttpContextReseter.Dispose">
             <summary>
             Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
             </summary>
            <remarks>Resets <see cref="P:System.Web.HttpContext.Current"/> to <c>null</c>.</remarks>
        </member>
        <member name="M:Testing.Commons.Web.HttpContextReseter.Dispose(System.Boolean)">
            <summary>
            Resets <see cref="P:System.Web.HttpContext.Current"/> to <c>null</c>.
            </summary>
            <param name="disposing"><c>true</c> if disposed via the <see cref="M:System.IDisposable.Dispose"/> method, <c>false</c> otherwise.</param>
        </member>
        <member name="T:Testing.Commons.Web.HttpRequestBuilder">
            <summary>
            Allows customizing members of <see cref="P:System.Web.HttpContext.Request"/>.
            </summary>
        </member>
        <member name="M:Testing.Commons.Web.HttpRequestBuilder.MakeSecure">
            <summary>
            Sets a value indicating that the HTTP connection uses secure sockets (that is, HTTPS) in <see cref="P:System.Web.HttpRequest.IsSecureConnection"/>.
            </summary>
            <returns>This instance of the builder.</returns>
        </member>
        <member name="M:Testing.Commons.Web.HttpRequestBuilder.WithReferrer(System.Uri)">
            <summary>
            Sets information about the URL of the client's previous request that linked to the current URL in <see cref="P:System.Web.HttpRequest.UrlReferrer"/>.
            </summary>
            <param name="referrer">A <see cref="T:System.Uri"/> object.</param>
            <returns>This instance of the builder.</returns>
        </member>
        <member name="M:Testing.Commons.Web.HttpRequestBuilder.AddToQueryString(System.String,System.String)">
            <summary>
            Adds a query variable to <see cref="P:System.Web.HttpRequest.QueryString"/>.
            </summary>
            <param name="key">The <c>String</c> key of the entry to add. The key can be null.</param>
            <param name="value">The <c>String</c> value of the entry to add. The value can be null.</param>
            <returns>This instance of the builder.</returns>
        </member>
        <member name="M:Testing.Commons.Web.HttpRequestBuilder.AddToQueryString(System.Collections.Specialized.NameValueCollection)">
            <summary>
            Adds multiple query variables to <see cref="P:System.Web.HttpRequest.QueryString"/>.
            </summary>
            <param name="queryString">Collection of HTTP query variables.</param>
            <returns>This instance of the builder.</returns>
        </member>
        <member name="M:Testing.Commons.Web.HttpRequestBuilder.AddToForm(System.String,System.String)">
            <summary>
            Adds a form variable to <see cref="P:System.Web.HttpRequest.Form"/>.
            </summary>
            <remarks>Adding form variables sets the <see cref="P:System.Web.HttpRequest.HttpMethod"/> to <c>POST</c>.</remarks>
            <param name="key">The <c>String</c> key of the entry to add. The key can be null.</param>
            <param name="value">The <c>String</c> value of the entry to add. The value can be null.</param>
            <returns>This instance of the builder.</returns>
        </member>
        <member name="M:Testing.Commons.Web.HttpRequestBuilder.AddToForm(System.Collections.Specialized.NameValueCollection)">
            <summary>
            Adds multiple form variables to <see cref="P:System.Web.HttpRequest.Form"/>.
            </summary>
            <remarks>Adding form variables sets the <see cref="P:System.Web.HttpRequest.HttpMethod"/> to <c>POST</c>.</remarks>
            <param name="form">Collection of form variables.</param>
            <returns>This instance of the builder.</returns>
        </member>
        <member name="M:Testing.Commons.Web.HttpRequestBuilder.WithUrl(System.Uri)">
            <summary>
            Set parts of the url of <see cref="P:System.Web.HttpRequest.Url"/>.
            </summary>
            <remarks>Query variables are ignored; in order to initialize them, use <see cref="M:Testing.Commons.Web.HttpRequestBuilder.AddToQueryString(System.Collections.Specialized.NameValueCollection)"/>.
            <para>Query variables set in <see cref="M:Testing.Commons.Web.HttpRequestBuilder.AddToQueryString(System.Collections.Specialized.NameValueCollection)"/> are added to the resulting <see cref="P:System.Web.HttpRequest.QueryString"/>.</para>
            <para>The <see cref="P:System.Uri.Scheme"/> can change due to <see cref="M:Testing.Commons.Web.HttpRequestBuilder.MakeSecure"/>.</para>
            </remarks>
            <param name="url">Information about the URL of the current request.</param>
            <returns>This instance of the builder.</returns>
        </member>
        <member name="M:Testing.Commons.Web.HttpRequestBuilder.AddToHeaders(System.String,System.String)">
            <summary>
            Adds an entry to <see cref="P:System.Web.HttpRequest.Headers"/>.
            </summary>
            <param name="key">The <c>String</c> key of the entry to add. The key can be null.</param>
            <param name="value">The <c>String</c> value of the entry to add. The value can be null.</param>
            <returns>This instance of the builder.</returns>
        </member>
        <member name="M:Testing.Commons.Web.HttpRequestBuilder.AddToHeaders(System.Collections.Specialized.NameValueCollection)">
            <summary>
            Adds multiple entries to <see cref="P:System.Web.HttpRequest.Headers"/>.
            </summary>
            <param name="headers">A collection of HTTP headers.</param>
            <returns>This instance of the builder.</returns>
        </member>
        <member name="M:Testing.Commons.Web.HttpRequestBuilder.AddToCookies(System.String,System.String)">
            <summary>
            Adds a cookie to <see cref="P:System.Web.HttpRequest.Cookies"/>.
            </summary>
            <param name="name">The name of the new cookie.</param>
            <param name="value">The value of the new cookie.</param>
            <returns>This instance of the builder.</returns>
        </member>
        <member name="M:Testing.Commons.Web.HttpRequestBuilder.AddToCookies(System.Web.HttpCookie)">
            <summary>
            Adds a cookie to <see cref="P:System.Web.HttpRequest.Cookies"/>.
            </summary>
            <param name="cookie">A HTTP cookie.</param>
            <returns>This instance of the builder.</returns>
        </member>
        <member name="P:Testing.Commons.Web.HttpRequestBuilder.Context">
            <summary>
            The custom built instance.
            </summary>
        </member>
        <member name="T:Testing.Commons.KeyValue">
            <summary>
            Creates instances of <see cref="T:System.Collections.Generic.KeyValuePair`2"/> taking advantage of type inference.
            </summary>
        </member>
        <member name="M:Testing.Commons.KeyValue.New``2(``0,``1)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Collections.Generic.KeyValuePair`2"/> structure with the specified key and value.
            </summary>
            <typeparam name="TKey">The type of the key.</typeparam>
            <typeparam name="TValue">The type of the value.</typeparam>
            <param name="key">The object defined in each key/value pair.</param>
            <param name="value">The definition associated with <paramref name="key"/>.</param>
            <returns>A new instance of <see cref="T:System.Collections.Generic.KeyValuePair`2"/> with the specified values.</returns>
        </member>
        <member name="M:Testing.Commons.KeyValue.Pair(System.String,System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Collections.Generic.KeyValuePair`2"/> structure with the specified key and value.
            </summary>
            <param name="key">The object defined in each key/value pair.</param>
            <param name="value">The definition associated with <paramref name="key"/>.</param>
            <returns>A new instance of <see cref="T:System.Collections.Generic.KeyValuePair`2"/> with the specified values.</returns>
        </member>
        <member name="T:Testing.Commons.Web.ProfileTestProvider">
            <summary>
            Allows testing classes that depend directly or indirectly from the ASP.NET profile system.
            </summary>
        </member>
        <member name="M:Testing.Commons.Web.ProfileTestProvider.GetPropertyValues(System.Configuration.SettingsContext,System.Configuration.SettingsPropertyCollection)">
            <summary>
            Returns the collection of settings property values for the specified application instance and settings property group.
            </summary>
            <returns>
            A <see cref="T:System.Configuration.SettingsPropertyValueCollection"/> containing the values for the specified settings property group.
            </returns>
            <param name="context">A <see cref="T:System.Configuration.SettingsContext"/> describing the current application use.</param><param name="collection">A <see cref="T:System.Configuration.SettingsPropertyCollection"/> containing the settings property group whose values are to be retrieved.</param><filterpriority>2</filterpriority>
        </member>
        <member name="M:Testing.Commons.Web.ProfileTestProvider.SetPropertyValues(System.Configuration.SettingsContext,System.Configuration.SettingsPropertyValueCollection)">
            <summary>
            Sets the values of the specified group of property settings.
            </summary>
            <param name="context">A <see cref="T:System.Configuration.SettingsContext"/> describing the current application usage.</param><param name="collection">A <see cref="T:System.Configuration.SettingsPropertyValueCollection"/> representing the group of property settings to set.</param><filterpriority>2</filterpriority>
        </member>
        <member name="M:Testing.Commons.Web.ProfileTestProvider.DeleteProfiles(System.Web.Profile.ProfileInfoCollection)">
            <summary>
            When overridden in a derived class, deletes profile properties and information for the supplied list of profiles.
            </summary>
            <returns>
            The number of profiles deleted from the data source.
            </returns>
            <param name="profiles">A <see cref="T:System.Web.Profile.ProfileInfoCollection"/>  of information about profiles that are to be deleted.</param>
        </member>
        <member name="M:Testing.Commons.Web.ProfileTestProvider.DeleteProfiles(System.String[])">
            <summary>
            When overridden in a derived class, deletes profile properties and information for profiles that match the supplied list of user names.
            </summary>
            <returns>
            The number of profiles deleted from the data source.
            </returns>
            <param name="usernames">A string array of user names for profiles to be deleted.</param>
        </member>
        <member name="M:Testing.Commons.Web.ProfileTestProvider.DeleteInactiveProfiles(System.Web.Profile.ProfileAuthenticationOption,System.DateTime)">
            <summary>
            When overridden in a derived class, deletes all user-profile data for profiles in which the last activity date occurred before the specified date.
            </summary>
            <returns>
            The number of profiles deleted from the data source.
            </returns>
            <param name="authenticationOption">One of the <see cref="T:System.Web.Profile.ProfileAuthenticationOption"/> values, specifying whether anonymous, authenticated, or both types of profiles are deleted.</param><param name="userInactiveSinceDate">A <see cref="T:System.DateTime"/> that identifies which user profiles are considered inactive. If the <see cref="P:System.Web.Profile.ProfileInfo.LastActivityDate"/>  value of a user profile occurs on or before this date and time, the profile is considered inactive.</param>
        </member>
        <member name="M:Testing.Commons.Web.ProfileTestProvider.GetNumberOfInactiveProfiles(System.Web.Profile.ProfileAuthenticationOption,System.DateTime)">
            <summary>
            When overridden in a derived class, returns the number of profiles in which the last activity date occurred on or before the specified date.
            </summary>
            <returns>
            The number of profiles in which the last activity date occurred on or before the specified date.
            </returns>
            <param name="authenticationOption">One of the <see cref="T:System.Web.Profile.ProfileAuthenticationOption"/> values, specifying whether anonymous, authenticated, or both types of profiles are returned.</param><param name="userInactiveSinceDate">A <see cref="T:System.DateTime"/> that identifies which user profiles are considered inactive. If the <see cref="P:System.Web.Profile.ProfileInfo.LastActivityDate"/>  of a user profile occurs on or before this date and time, the profile is considered inactive.</param>
        </member>
        <member name="M:Testing.Commons.Web.ProfileTestProvider.GetAllProfiles(System.Web.Profile.ProfileAuthenticationOption,System.Int32,System.Int32,System.Int32@)">
            <summary>
            When overridden in a derived class, retrieves user profile data for all profiles in the data source.
            </summary>
            <returns>
            A <see cref="T:System.Web.Profile.ProfileInfoCollection"/> containing user-profile information for all profiles in the data source.
            </returns>
            <param name="authenticationOption">One of the <see cref="T:System.Web.Profile.ProfileAuthenticationOption"/> values, specifying whether anonymous, authenticated, or both types of profiles are returned.</param><param name="pageIndex">The index of the page of results to return.</param><param name="pageSize">The size of the page of results to return.</param><param name="totalRecords">When this method returns, contains the total number of profiles.</param>
        </member>
        <member name="M:Testing.Commons.Web.ProfileTestProvider.GetAllInactiveProfiles(System.Web.Profile.ProfileAuthenticationOption,System.DateTime,System.Int32,System.Int32,System.Int32@)">
            <summary>
            When overridden in a derived class, retrieves user-profile data from the data source for profiles in which the last activity date occurred on or before the specified date.
            </summary>
            <returns>
            A <see cref="T:System.Web.Profile.ProfileInfoCollection"/> containing user-profile information about the inactive profiles.
            </returns>
            <param name="authenticationOption">One of the <see cref="T:System.Web.Profile.ProfileAuthenticationOption"/> values, specifying whether anonymous, authenticated, or both types of profiles are returned.</param><param name="userInactiveSinceDate">A <see cref="T:System.DateTime"/> that identifies which user profiles are considered inactive. If the <see cref="P:System.Web.Profile.ProfileInfo.LastActivityDate"/>  of a user profile occurs on or before this date and time, the profile is considered inactive.</param><param name="pageIndex">The index of the page of results to return.</param><param name="pageSize">The size of the page of results to return.</param><param name="totalRecords">When this method returns, contains the total number of profiles.</param>
        </member>
        <member name="M:Testing.Commons.Web.ProfileTestProvider.FindProfilesByUserName(System.Web.Profile.ProfileAuthenticationOption,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            When overridden in a derived class, retrieves profile information for profiles in which the user name matches the specified user names.
            </summary>
            <returns>
            A <see cref="T:System.Web.Profile.ProfileInfoCollection"/> containing user-profile information for profiles where the user name matches the supplied <paramref name="usernameToMatch"/> parameter.
            </returns>
            <param name="authenticationOption">One of the <see cref="T:System.Web.Profile.ProfileAuthenticationOption"/> values, specifying whether anonymous, authenticated, or both types of profiles are returned.</param><param name="usernameToMatch">The user name to search for.</param><param name="pageIndex">The index of the page of results to return.</param><param name="pageSize">The size of the page of results to return.</param><param name="totalRecords">When this method returns, contains the total number of profiles.</param>
        </member>
        <member name="M:Testing.Commons.Web.ProfileTestProvider.FindInactiveProfilesByUserName(System.Web.Profile.ProfileAuthenticationOption,System.String,System.DateTime,System.Int32,System.Int32,System.Int32@)">
            <summary>
            When overridden in a derived class, retrieves profile information for profiles in which the last activity date occurred on or before the specified date and the user name matches the specified user name.
            </summary>
            <returns>
            A <see cref="T:System.Web.Profile.ProfileInfoCollection"/> containing user profile information for inactive profiles where the user name matches the supplied <paramref name="usernameToMatch"/> parameter.
            </returns>
            <param name="authenticationOption">One of the <see cref="T:System.Web.Profile.ProfileAuthenticationOption"/> values, specifying whether anonymous, authenticated, or both types of profiles are returned.</param><param name="usernameToMatch">The user name to search for.</param><param name="userInactiveSinceDate">A <see cref="T:System.DateTime"/> that identifies which user profiles are considered inactive. If the <see cref="P:System.Web.Profile.ProfileInfo.LastActivityDate"/> value of a user profile occurs on or before this date and time, the profile is considered inactive.</param><param name="pageIndex">The index of the page of results to return.</param><param name="pageSize">The size of the page of results to return.</param><param name="totalRecords">When this method returns, contains the total number of profiles.</param>
        </member>
        <member name="M:Testing.Commons.Web.ProfileTestProvider.AssertPropertyValue(System.String,System.Action{System.Object})">
             <summary>
            Allows asserting on a given property value.
            </summary>
            <remarks>The assertion is only performed if the property named after <paramref name="propertyName"/> exists.</remarks>
            <param name="propertyName">the name of the property which value is going to be asserted on.</param>
            <param name="assertion">Assertion on the value</param>
            <returns>The instance of <see cref="T:Testing.Commons.Web.ProfileTestProvider"/> in order to be able to chain method calls.</returns>
        </member>
        <member name="M:Testing.Commons.Web.ProfileTestProvider.StubValues(System.Collections.Generic.KeyValuePair{System.String,System.Object}[])">
            <summary>
            Sets the values for the properties defined in the profile system.
            </summary>
            <remarks>Setting the value for a property not defined in configuration would not throw.</remarks>
            <param name="values">A collection of property names and values.</param>
        </member>
        <member name="M:Testing.Commons.Web.ProfileTestProvider.StubValues(System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            Sets the values for the properties defined in the profile system.
            </summary>
            <remarks>Setting the value for a property not defined in configuration would not throw.</remarks>
            <param name="values">A collection of property names and values.</param>
        </member>
        <member name="M:Testing.Commons.Web.ProfileTestProvider.StubValues(System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            Sets the values for the properties defined in the profile system.
            </summary>
            <remarks>Setting the value for a property not defined in configuration would not throw.</remarks>
            <param name="values">A collection of property names and values.</param>
        </member>
        <member name="M:Testing.Commons.Web.ProfileTestProvider.StubValues``1(``0)">
            <summary>
            Sets the values for the properties defined in the profile system as defined by the anonymous object.
            </summary>
            <remarks>Setting the value for a property not defined in configuration would not throw.</remarks>
            <param name="values">A collection of property names and values in the shape of an anonymous object.</param>
        </member>
        <member name="M:Testing.Commons.Web.ProfileTestProvider.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>
            A <see cref="T:System.Collections.Generic.IEnumerator`1"/> that can be used to iterate through the collection.
            </returns>
            <filterpriority>1</filterpriority>
        </member>
        <member name="M:Testing.Commons.Web.ProfileTestProvider.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
            <returns>
            An <see cref="T:System.Collections.IEnumerator"/> object that can be used to iterate through the collection.
            </returns>
            <filterpriority>2</filterpriority>
        </member>
        <member name="M:Testing.Commons.Web.ProfileTestProvider.SetAsDefault">
            <summary>
            Sets the default provider (<see cref="P:System.Web.Profile.ProfileManager.Provider"/>) to a test provider.
            </summary>
            <remarks>Invoke it once per test fixture to ease configuration of the profile system while testing.
            <para>The test provider must have been added to the collection of available providers and should be named <c>test</c>.</para>
            </remarks>
        </member>
        <member name="M:Testing.Commons.Web.ProfileTestProvider.SetAsDefault(System.String)">
            <summary>
            Sets the default provider (<see cref="P:System.Web.Profile.ProfileManager.Provider"/>) to a test provider.
            </summary>
            <remarks>Invoke it once per test fixture to ease configuration of the profile system while testing.
            <para>The test provider must have been added to the collection of available providers and should be named <paramref name="testProviderName"/>.</para>
            </remarks>
            <param name="testProviderName">Name of the test provider.</param>
        </member>
        <member name="P:Testing.Commons.Web.ProfileTestProvider.ApplicationName">
            <summary>
            Gets or sets the name of the currently running application.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that contains the application's shortened name, which does not contain a full path or extension, for example, SimpleAppSettings.
            </returns>
            <filterpriority>2</filterpriority>
        </member>
        <member name="P:Testing.Commons.Web.ProfileTestProvider.Properties">
            <summary>
            Surfaces the list of properties set in the provider.
            </summary>
        </member>
    </members>
</doc>
